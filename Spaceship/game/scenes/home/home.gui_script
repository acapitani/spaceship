local function fadeout_done(self, url, property)
	next_scene="loader#ingame"
	msg.post("game:/loader#game", "unload_scene")
end

local function fadeout(self)
	gui.animate(gui.get_node("fade"), gui.PROP_COLOR, vmath.vector4(0, 0, 0, 1), gui.EASING_INOUTQUAD, 0.5, 0.0, fadeout_done)
end

function init(self)
	local node = gui.get_node("play")
	gui.animate(node, "color.w", 0.1, gui.EASING_LINEAR, 2.0, 0, nil, gui.PLAYBACK_LOOP_PINGPONG)
	gui.animate(node, "scale.x", 2.2, gui.EASING_LINEAR, 2.0, 0, nil, gui.PLAYBACK_LOOP_PINGPONG)
	gui.animate(node, "scale.y", 2.2, gui.EASING_LINEAR, 2.0, 0, nil, gui.PLAYBACK_LOOP_PINGPONG)
	msg.post(".", "acquire_input_focus") 
end

function final(self)
	-- Add finalization code here
	-- Remove this function if not needed
end

function update(self, dt)
	-- Add update code here
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	-- Add message-handling code here
	-- Remove this function if not needed
end

function on_input(self, action_id, action)
	if action_id == hash("click") and action.pressed then 
		local button = gui.get_node("play") 
		if gui.pick_node(button, action.x, action.y) then 
			--next_scene="loader#ingame"
			--msg.post("game:/loader#game", "unload_scene")
			fadeout(self)
		end
	elseif action_id == hash("back") then
		msg.post("@system:", "exit", {code = 0})
	end
end
