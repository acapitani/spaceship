go.property("energy", 5)
go.property("fire_type", 0)

local idle1 = hash("idle1")
local idle2 = hash("idle2")

local group_enemy = hash("enemy")
local group_bullet = hash("bullet")
local group_bonus = hash("bonus")

local animation = 0
local last_posx = 0
local last_posy = 0
local last_time = 0
local ammo_timer = 0

local collision_message_id = hash("collision_response")

local function update_hud(self)
	local msgdata = { energy = self.energy, fire_type = self.fire_type, fire_ammo = self.fire_ammo, ship_score = score }
	msg.post("/hud#ingame", "update_hud", msgdata)
end

local function message_hud(self, text, duration)
	local msgdata = { text = text, duration = duration }
	msg.post("/hud#ingame", "show_message", msgdata)
end

local function increase_energy(self)
	if self.energy<5 then
		self.energy = self.energy + 1
	end
	score = score + 100
	msg.post("/controller#ingame", "ship_bonus1")
	update_hud(self)
end

local function decrease_energy(self)
	if self.energy>0 then
		self.energy = self.energy - 1
		if self.energy<=0 then
			self.energy = 0
			-- game over  
			message_hud(self, "GAME OVER", 3.0)
			self.status = 1
			local pos = go.get_position()
			pos.x = 128
			pos.y = -64
			go.set_position(pos)
		end
	end
	update_hud(self)	
end

local function increase_ammo(self)
	if self.fire_type <5 then
		self.fire_type = self.fire_type +1
	end
	score = score + 100
	self.fire_ammo = 1.0
	-- ammo_timer = 0
	msg.post("/controller#ingame", "ship_bonus2")
	update_hud(self)
end

local function decrease_ammo(self)
	if self.fire_type>0 then
		self.fire_type = self.fire_type-1
	end
	self.fire_ammo = 1.0
	ammo_timer = 0
	update_hud(self)
end

local function fire(self)
	local pos = go.get_position()
	pos.z = 0.5
	factory.create("#bullet_factory", pos, nil, {bullet_type=2, angle=0.0})
	msg.post("/controller#ingame", "ship_fire")
	if self.fire_type>0 then
		for i=1,self.fire_type do
			local z = 0.02 * i	
			local angle1 = z
			local angle2 = z*-1.0
			-- fire left 
			factory.create("#bullet_factory", pos, nil, {bullet_type=2, angle=angle1})
			-- fire right 
			factory.create("#bullet_factory", pos, nil, {bullet_type=2, angle=angle2})
		end
	end
end

local function ready_done(self, url, property)
	self.status = 2
	message_hud(self, "GO!", 0.5)
end

function init(self)
	last_time = 0
	ammo_timer = 0
	self.status = 0	-- 0: ready, 1: die, 2: in game
	self.dragging = false
	self.fire_ammo = 1.0
	go.set_position(vmath.vector3(128.0, -64.0, 0.85))
	msg.post(".", "acquire_input_focus")
	animation = idle1
	msg.post("#sprite", "play_animation", {id = animation})
	go.animate(go.get_id(), "position.y", go.PLAYBACK_ONCE_FORWARD, 64, go.EASING_LINEAR, 0.5, 0, ready_done)
	update_hud(self)
	message_hud(self, "READY", 1.0)
end

function final(self)
	-- Add finalization code here
	-- Remove this function if not needed
end

function update(self, dt)
	if self.status>1 then
		last_time = last_time + (dt*1000.0)
		local fire_time = 250
		if self.fire_type>=5 then
			fire_time = 125
		end
		if last_time>=fire_time then
			fire(self)
			last_time = 0
		end
		if self.fire_type>0 then
			ammo_timer = ammo_timer + (dt*1000.0)
			local at = ammo_timer
			if at>10000 then
				at = 10000
			end
			self.fire_ammo = 1.0 - (at/10000)
			if ammo_timer>=10000 then
				decrease_ammo(self)
				ammo_timer = 0
			end
		end
		update_hud(self)
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("animation_done") then
		if animation==idle1 then
			animation = idle2
		else
			animation = idle1
		end
		msg.post("#sprite", "play_animation", { id = animation })
	elseif message_id == collision_message_id then
		local hit = false
		if message.group == group_bullet then
			local url = msg.url(message.other_id)
			url.fragment = "script"
			if go.get(url, hash("bullet_type"))==1 then
				hit = true
				go.delete(message.other_id)
			end
		elseif message.group==group_enemy then
			hit = true
		elseif message.group==group_bonus then
			local url = msg.url(message.other_id)
			url.fragment = "script"
			if go.get(url, hash("bonus_type"))==1 then
				increase_energy(self)
			else
				increase_ammo(self)
			end
			go.delete(message.other_id)
		end

		if hit==true then
			msg.post("/controller#ingame", "explosion", {position=go.get_position()})
			self.fire_type = 0
			decrease_energy(self)
			--self.status = 0
			--go.set_position(vmath.vector3(128.0, -64.0, 1.0))
			--go.animate(go.get_id(), "position.y", go.PLAYBACK_ONCE_FORWARD, 64, go.EASING_LINEAR, 0.5, 0, ready_done)
		end
	end
end

function on_input(self, action_id, action)
	if action_id==hash("touch") or action_id==hash("click") then
		if action.pressed then
			self.dragging = true
			last_posx = action.x
			last_posy = action.y
		elseif action.released then
			self.dragging = false
		end
	end
	-- update position of ball if we are dragging it
	if self.dragging and self.status>1  then
		--print("x: "..tostring(action.x).." y: "..tostring(action.y))
		local dx = action.x-last_posx
		local dy = action.y-last_posy
		--local px = math.floor(dx*(RESOLUTION_X/screen_width))
		--local py = math.floor(dy*(RESOLUTION_Y/screen_height))
		local px = dx*(RESOLUTION_X/screen_width)
		local py = dy*(RESOLUTION_Y/screen_height)
		local pos = go.get_position()
		pos.x = pos.x + px 
		pos.y = pos.y + py
		if pos.x>RESOLUTION_X then
			pos.x = RESOLUTION_X
		end
		if pos.x<0 then
			pos.x = 0
		end
		if pos.y>RESOLUTION_Y then
			pos.y = RESOLUTION_Y
		end
		if pos.y<0 then
			pos.y = 0
		end
		go.set_position(pos)
		last_posx = action.x
		last_posy = action.y
	end
end
